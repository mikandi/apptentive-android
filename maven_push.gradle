apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENSE_NAME
                            url POM_LICENSE_URL
                            distribution POM_LICENSE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        failOnError = false

        source = android.sourceSets.main.java.srcDirs
        // Don't document everything. Just the public API classes.
        include 'com/apptentive/android/sdk/Apptentive.java'
        include 'com/apptentive/android/sdk/ApptentiveActivity.java'
        include 'com/apptentive/android/sdk/ApptentiveListActivity.java'
        include 'com/apptentive/android/sdk/module/rating/impl/AmazonAppstoreRatingProvider.java'
        include 'com/apptentive/android/sdk/module/rating/impl/GooglePlayRatingProvider.java'
        include 'com/apptentive/android/sdk/module/rating/IRatingProvider.java'
        include 'com/apptentive/android/sdk/module/messagecenter/UnreadMessagesListener.java'
        include 'com/apptentive/android/sdk/module/survey/OnSurveyFinishedListener.java'
        include 'com/apptentive/android/sdk/model/ExtendedData.java'
        include 'com/apptentive/android/sdk/model/CommerceExtendedData.java'
        include 'com/apptentive/android/sdk/model/LocationExtendedData.java'
        include 'com/apptentive/android/sdk/model/TimeExtendedData.java'

        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    androidJavadocs << {
        println "Javadocs written to: " + destinationDir
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

/*
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }
*/

    artifacts {
//        archives androidSourcesJar
        archives androidJavadocsJar
    }
}

